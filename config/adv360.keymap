/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        BracketBrace {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <51 50>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 15>;
        };

        RightBracketBrace {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <65 64>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1              &kp N2          &kp N3            &kp N4          &kp N5  &tog 0                                                                     &mo 3              &kp N6  &kp N7           &kp N8             &kp N9           &kp N0                       &kp MINUS
&kp TAB    &kp Q               &kp W           &kp E             &kp R           &kp T   &caps_word                                                                 &macro_ue_compile  &kp Y   &kp U            &kp I              &kp O            &kp P                        &kp BSLH
&kp ESC    &hm LEFT_CONTROL A  &hm LEFT_ALT S  &hm LEFT_SHIFT D  &hm LEFT_WIN F  &kp G   &none       &kp LCTRL     &kp LALT  &none  &none  &kp LGUI   &kp RCTRL     &none              &kp H   &hm RIGHT_WIN J  &hm RIGHT_SHIFT K  &hm RIGHT_ALT L  &hm RIGHT_CONTROL SEMICOLON  &kp SQT
&kp LSHFT  &kp Z               &kp X           &kp C             &kp V           &kp B   &none       &none         &kp HOME  &none  &none  &kp PG_UP  &none         &none              &kp N   &kp M            &kp COMMA          &kp DOT          &kp FSLH                     &kp RSHFT
&mo 2      &kp GRAVE           &kp CAPS        &kp LEFT          &kp RIGHT               &kp SPACE   &lt 2 RETURN  &kp END                 &kp PG_DN  &lt 2 DELETE  &kp BACKSPACE              &kp UP           &kp DOWN           &kp LBKT         &kp RBKT                     &mo 2
            >;
        };

        Mac {
            bindings = <
&trans  &trans          &trans  &trans  &trans       &trans  &trans                                                  &trans  &trans  &trans       &trans  &trans  &trans                   &trans
&trans  &trans          &trans  &trans  &trans       &trans  &trans                                                  &trans  &trans  &trans       &trans  &trans  &trans                   &trans
&trans  &hm LEFT_WIN A  &trans  &trans  &hm LCTRL F  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &hm RCTRL J  &trans  &trans  &hm RIGHT_WIN SEMICOLON  &trans
&trans  &trans          &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans                   &trans
&trans  &trans          &trans  &trans  &trans               &trans  &trans  &trans                  &trans  &trans  &trans          &trans       &trans  &trans  &trans                   &trans
            >;
        };

        Symbols {
            bindings = <
&kp C_PP  &trans  &kp F10  &kp F11  &kp F12  &to 0   &trans                                                &trans  &kp LC(LG(LS(NUMBER_4)))  &kp K_BACK      &kp K_PLAY_PAUSE  &kp K_FORWARD  &trans        &kp C_RECORD
&trans    &trans  &kp F7   &kp F8   &kp F9   &to 1   &none                                                 &none   &trans                    &kp C_VOL_DN    &kp C_VOLUME_UP   &kp K_MUTE     &trans        &trans
&trans    &trans  &kp F4   &kp F5   &kp F6   &trans  &none   &trans  &trans  &none  &none  &trans  &trans  &none   &kp LEFT                  &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT      &caps_word    &trans
&trans    &trans  &kp F1   &kp F2   &kp F3   &trans  &none   &none   &trans  &none  &none  &trans  &none   &none   &kp PAGE_UP               &kp PAGE_DOWN   &kp HOME          &kp END        &kp CAPSLOCK  &trans
&trans    &trans  &trans   &trans   &trans           &trans  &trans  &trans                &trans  &trans  &trans                            &trans          &trans            &trans         &trans        &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                            &trans                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                      &bootloader             &none         &none         &none         &none         &none         &none
&none  &none         &none         &none         &none         &none         &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &none  &none  &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &none         &none         &none         &none         &none         &none
&none  &none         &none         &none         &none         &none         &none                   &none       &none  &none  &none  &none       &none       &none                   &none         &none         &none         &none         &none         &none
&none  &none         &none         &bl BL_INC    &bl BL_DEC                  &rgb_ug RGB_TOG         &bl BL_TOG  &none                &none       &bl BL_TOG  &rgb_ug RGB_TOG                       &bl BL_INC    &bl BL_DEC    &none         &none         &none
            >;
        };
    };
};
